import pandas as pd
from datetime import datetime

NUMBER_DAY = {0: 'üìÖ–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö', 1: 'üìÖ–í–¢–û–†–ù–ò–ö', 2: 'üìÖ–°–†–ï–î–ê', 3: 'üìÖ–ß–ï–¢–í–ï–†–ì', 4: 'üìÖ–ü–Ø–¢–ù–ò–¶–ê', 5: 'üìÖ–°–£–ë–ë–û–¢–ê'}
DAY_NUMBER = {'–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö': 0, '–í–¢–û–†–ù–ò–ö': 1, '–°–†–ï–î–ê': 2, '–ß–ï–¢–í–ï–†–ì': 3, '–ü–Ø–¢–ù–ò–¶–ê': 4, '–°–£–ë–ë–û–¢–ê': 5}
SHORT_DAY_NUMBER = {'–ü–ù': 0, '–í–¢': 1, '–°–†': 2, '–ß–¢': 3, '–ü–¢': 4, '–°–ë': 5}


class Student:

    def __init__(self, user_id='228', group='–ò–í–ë–û-06-19', file='–ò–ò–¢_2–∫_20-21_–≤–µ—Å–Ω–∞.xlsx',
                 pair=False, day=False, week=False):
        self.group = group
        self.user_id = str(user_id)
        self.my_file = file
        self.everyDaySub = day
        self.everyWeekSub = week
        self.everyPairSub = pair
        self.week_is_even = datetime.now().isocalendar()[1] % 2 == 1

    def __str__(self):
        return f'group = {self.group}, user_id = {self.user_id}, ' \
               f'file = {self.my_file}'

    def get_this_week_schedule(self):
        data_frame = pd.read_excel('resources/' + self.my_file)
        for j in range(len(data_frame.iloc[0])):
            if str(self.group) in str(data_frame.iloc[0][j]):
                index = j
                break
        return [[data_frame.iloc[i][index] for index in range(index, index + 4)] for i in range(len(data_frame) - 16)
                if i > 1]

    def reformat_week_schedule(self, schedule, half=True):
        """From raw week schedule data to readable schedule"""
        monday = schedule[0:12]
        tuesday = schedule[12:24]
        wednesday = schedule[24:36]
        thursday = schedule[36:48]
        friday = schedule[48:60]
        saturday = schedule[60:72]
        days = [monday, tuesday, wednesday, thursday, friday, saturday]
        pair_time = ['\n‚è±9:00-10:30‚è±\n', '\n‚è±10:40-12:10‚è±\n', '\n‚è±12:40-14:10‚è±\n', '\n‚è±14:20-15:50‚è±\n',
                     '\n‚è±16:20-17:50‚è±\n', '\n‚è±18:00-19:30‚è±\n', '--//--', '--//--']
        # —Ü–∏–∫–ª –ø–æ –¥–Ω—è–º

        for day in days:
            i = 0
            stop = len(day)
            pair_is_even = False
            pair_number = pair_time[0]
            # —Ü–∏–∫–ª –ø–æ –ø–∞—Ä–∞–º
            while i != stop:
                if half and pair_is_even and not self.week_is_even:
                    del day[i]
                    stop -= 1
                    pair_is_even = not pair_is_even
                    pair_number = pair_time[pair_time.index(pair_number) + 1]
                elif half and not pair_is_even and self.week_is_even:
                    del day[i]
                    stop -= 1
                    pair_is_even = not pair_is_even
                elif type(day[i][0]) is float:
                    del day[i]
                    stop -= 1
                    if pair_is_even:
                        pair_number = pair_time[pair_time.index(pair_number) + 1]
                    pair_is_even = not pair_is_even
                else:
                    #: day[i][0] - –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—ã
                    #: day[i][1] - —Ç–∏–ø –ø–∞—Ä—ã
                    #: day[i][2] - –ø—Ä–µ–ø–æ–¥
                    #: day[i][3] - –∞—É–¥–∏—Ç–æ—Ä–∏—è
                    day[i][1] = ' - ' + str(day[i][1]) + '\n'
                    day[i].insert(0, str(pair_number))
                    day[i][3] = str(day[i][3]) + '\n'
                    if not half:
                        if pair_is_even:
                            day[i].insert(0, 'I')
                        else:
                            day[i].insert(0, 'II')
                    pair_is_even = not pair_is_even
                    pair_number = pair_time[pair_time.index(pair_number) + int(not pair_is_even)]
                    i += 1

        monday.insert(0, '\nüìÖ–ü–û–ù–ï–î–ï–õ–¨–ù–ò–ö')
        tuesday.insert(0, '\nüìÖ–í–¢–û–†–ù–ò–ö')
        wednesday.insert(0, '\nüìÖ–°–†–ï–î–ê')
        thursday.insert(0, '\nüìÖ–ß–ï–¢–í–ï–†–ì')
        friday.insert(0, '\nüìÖ–ü–Ø–¢–ù–ò–¶–ê')
        saturday.insert(0, '\nüìÖ–°–£–ë–ë–û–¢–ê')
        for day in days:
            if len(day) == 1:
                day.insert(1, '\n–í–´–•–û–î–ù–û–ô')
        out = '\n'.join(map(str, days))
        return out.replace('[', '\n').replace(',', ' ').replace('nan', '   ').replace(']', '').replace('\'', '') \
            .replace('\\n', '\n\t').replace(' –î ', ' –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ ').replace(' –î\n', ' –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ ')

    def reformat_day_schedule(self, schedule, day):
        week_schedule = self.reformat_week_schedule(schedule).split('\n')
        day_name = NUMBER_DAY[day]
        res = []
        if day < 5:
            next_day_name = NUMBER_DAY[day + 1]
            for line in week_schedule:
                if day_name in line:
                    i = week_schedule.index(line)
                    while next_day_name not in week_schedule[i]:
                        res.append(week_schedule[i])
                        i += 1
                    return '\n'.join(res)
        if day == 5:
            for line in week_schedule:
                if day_name in line:
                    for i in range(week_schedule.index(line), len(week_schedule)):
                        res.append(week_schedule[i])
                        i += 1
                    return '\n'.join(res)
